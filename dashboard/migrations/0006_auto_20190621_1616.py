# Generated by Django 2.2 on 2019-06-21 14:16
import json
import sys
import django

from django.db import migrations
from django.contrib.gis.gdal import DataSource 
from django.contrib.gis.geos import GEOSGeometry, MultiPolygon, Polygon

def is_bxl_commune(name):
    communes = [
        'Anderlecht', 'Auderghem', 'Berchem-Sainte-Agathe', 'Etterbeek', 'Evere', 'Forest', 'Ganshoren', 'Ixelles', 'Jette', 'Koekelberg', 
        'Molenbeek-Saint-Jean', 'Saint-Gilles', 'Saint-Josse-ten-Noode', 'Schaerbeek', 'Uccle', 'Bruxelles', 'Watermael-Boitsfort',
        'Woluwe-Saint-Lambert', 'Woluwe-Saint-Pierre'
        ]
    
    fr_name = name.split(' - ')[0]

    return fr_name in communes
    


def import_communes(apps, schema_editor):

    Commune = apps.get_model('dashboard', 'Commune')

    centers = DataSource('/mnt/data/Shared_Documents/MLG/Belgium_map_data/gis_osm_places_free_1.shp')[0]

    commune_dicts = {} # Keys are commune names, values are dicts with other attributes

    for cent in centers:
        name = cent.get('name')
        geometry = cent.geom
        if is_bxl_commune(name):
            commune_dicts[name] = {
                'name': name, # Also included as it is required by the model
                'postal_code': cent.get('code'),
                'population': cent.get('population'),
                'center': geometry.geos
            }

    print(commune_dicts)

    with open('/mnt/data/Shared_Documents/MLG/commune_borders.json') as borders_file:
        commune_borders = json.load(borders_file)['features']
    
    for cb in commune_borders:
        fr_name = cb['properties']['NAME_FRE']
        nl_name = cb['properties']['NAME_DUT']
        print(f'adding borders for commune {fr_name}')
        # new_commune_co = []
        # for co in cb['geometry']['coordinates']:
        #     new_co = []
        #     if(len(co) == 1):
        #         for coord in co[0]:
        #             new_co.append([coord[1], coord[0]])
        #     else:
        #         for coord in co:
        #             new_co.append([coord[1], coord[0]])
        #     # print(new_co)
        #     new_commune_co.append(new_co)
        
        # cb['geometry']['coordinates'] = new_commune_co

        geom = GEOSGeometry(json.dumps(cb['geometry'])) # Convert back to json to take advantage of GEOSGeometry features
        

        if isinstance(geom, Polygon):
            geom = MultiPolygon(geom)
        
        print(f'New geometry: \n {geom.json}')
        dup_keys = []
        for key in commune_dicts:
            fname = key.split(' - ')[0]
            # print(fname)
            if fr_name == fname:
                commune_dicts[key]['boundaries'] = geom
                commune_dicts[key]['area'] = geom.area

        for k in dup_keys:
            del commune_dicts[k]

    for com in commune_dicts.values():
        print('Creating new commune')
        com = Commune(**com)
        com.save()



class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0005_commune_postal_code'),
    ]

    operations = [
        migrations.AlterField(
            model_name='commune',
            name='boundaries',
            field=django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326),
        ),
        migrations.RunPython(import_communes, migrations.RunPython.noop),
    ] if 'test' not in sys.argv[1:] else []
