# Generated by Django 2.2 on 2019-07-19 14:30
import csv

from datetime import datetime

from django.db import migrations, models

from django.contrib.gis.geos import fromstr, LineString

from sortedcontainers import SortedList

# import geopandas as gp

# import shapely.wkt as wkt

def load_trucks_csv(csv_path, Truck):

    trucks_dict = {}
    with open(csv_path, newline='') as measurements:
        fieldnames = [
            'req_timestamp', 'id_timestamp', 'id', 'long', 'lat', 'speed', 'direction', 'nationality', 'eurocode', 
            'MAM', 'measurement_timestamp', 'measurement_time', 'position', 'commune']
        reader = csv.DictReader(measurements, fieldnames=fieldnames)

        for row in reader:
            obu_id = row['id']
            measurement_time = datetime.fromisoformat(row['measurement_timestamp'])
            pos = fromstr(row['position'])
            vel = float(row['speed'])
            if obu_id not in trucks_dict:
                trucks_dict[obu_id] = {
                    'positions': SortedList([(pos, measurement_time)], key=lambda x: x[1]), #Keeptrack of positions sorted by time
                    'weight_category': int(row['MAM']),
                    'velocities': [vel], #List of velocities to take the average at the end
                    'country_code': row['nationality'],
                    'euro_value': int(row['eurocode'])
                }
            else:
                truck = trucks_dict[obu_id]
                truck['positions'].add((pos, measurement_time))
                truck['velocities'].append(vel)
    # print(trucks_dict)

    for obu_id, truck_data in trucks_dict.items():
        velocities = truck_data['velocities']
        avg_vel = sum(velocities) / len(velocities)

        positions = truck_data['positions']
        last_pos = positions[-1][0]
        pos_list = []
        time_list = []

        # print(positions)
        for pos, dt in positions:
            pos_list.append(pos)
            time_list.append(dt.time())
        
        # print(pos_list)
        date = positions[0][1].date()
        route = LineString(pos_list) if len(pos_list) > 1 else LineString([])

        Truck.objects.create(
            obu_id=obu_id, measurement_date=date, weight_category=truck_data['weight_category'], average_velocity=avg_vel, 
            country_code=truck_data['country_code'], euro_value=truck_data['euro_value'], last_position=last_pos,
            route=route)



def import_truck_data(apps, schema_editor):
    Truck = apps.get_model('dashboard', 'Truck')

    load_trucks_csv('/mnt/data/Shared_Documents/MLG/2018-09-26.csv', Truck)


    #TODO: convert position column to Geometry object and insert data in DB

    

class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0006_auto_20190621_1616'),
    ]

    operations = [
        migrations.AlterField(
            model_name='truck',
            name='obu_id',
            field=models.BigIntegerField(),
        ),
        migrations.RunPython(import_truck_data)
    ]
